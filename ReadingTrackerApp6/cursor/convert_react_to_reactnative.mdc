---
description: 
globs: 
alwaysApply: false
---
## React 웹 → React Native 변환 프롬프트

**변환 대상 컴포넌트**:  
`[변환할 React 웹 컴포넌트명]` (예: App.js, Header.js)

**변환 지시사항**:
1. **컴포넌트 구조 변경**:
   - `<div>` → `<View>`로 교체
   - `<span>`/`<p>` → `<Text>`로 교체
   - CSS 클래스 → `StyleSheet.create()` 객체로 전환
// 변환 예시
const styles = StyleSheet.create({
container: {
padding: 16,
backgroundColor: '#f0f0f0'
}
});

text

2. **네비게이션 변환**:
- `react-router` → `@react-navigation` 패키지로 변경
- Stack/Tab 네비게이션 구현 필요

3. **이벤트 처리**:
- `onClick` → `onPress`로 변경
- 터치 이벤트는 `TouchableOpacity`/`TouchableHighlight` 사용

4. **플랫폼별 분기**:
// iOS/Android 분기 처리
Platform.select({
ios: { padding: 20 },
android: { padding: 15 }
})

text

5. **디바이스 기능 통합**:
- 카메라/위치 등 네이티브 기능은 `expo-camera`, `expo-location` 등 별도 모듈 추가

**예상 출력 형식**:
import React from 'react';
import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';

const ConvertedComponent = () => (
<View style={styles.container}>
<TouchableOpacity onPress={() => console.log('Pressed')}>
<Text>변환된 버튼</Text>
</TouchableOpacity>
</View>
);

const styles = StyleSheet.create({
container: { ... }
});

text

**주의사항**:
- 웹 전용 라이브러리(예: `window` 객체 사용)는 네이티브 대체 모듈 필요
- 반응형 디자인 → `Dimensions.get('window')` 활용
- 성능 최적화를 위해 `FlatList` 사용 권장[2][4][6]
이 프롬프트는 다음 원칙을 기반으로 작성되었습니다:

코어 로직 재사용: 상태 관리(Redux 등)와 비즈니스 로직은 70% 이상 재사용 가능

UI 레이어 재작성: 웹 컴포넌트와 스타일은 플랫폼별 컴포넌트로 필수 교체

네이티브 기능 통합: 디바이스 API는 react-native 또는 expo 모듈로 대체

테스트 주도 개발: iOS/Android 동시 테스트를 위한 Platform.select() 적용